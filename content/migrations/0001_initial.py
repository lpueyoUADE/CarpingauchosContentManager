# Generated by Django 5.2.4 on 2025-08-20 05:03

import content.models
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AttackSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DialogueSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('speaker', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('value', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000000)])),
                ('icon_path', models.TextField(blank=True, default='', null=True)),
                ('type', models.CharField(choices=[('weapon', 'Weapon'), ('equipment', 'Equipment'), ('consumable', 'Consumable'), ('quest', 'Quest Item')], max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Localization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('english', models.TextField(blank=True, default='', null=True)),
                ('spanish', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Projectile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('prefab', models.TextField(blank=True, default='', null=True)),
                ('speed', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('life_time', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(15)])),
                ('radius', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5)])),
                ('apply_gravity', models.BooleanField(default=True)),
                ('gravity_scale', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('drag_coefficient', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1)])),
                ('velocity_decay_factor', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1)])),
                ('minimum_speed', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1)])),
                ('rotation_speed', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('extra_param_1', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('extra_param_2', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('extra_param_3', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('extra_param_4', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('extra_param_5', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dialogue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('type', models.CharField(choices=[('basic', 'Basic'), ('quest_prompt', 'Quest Prompt'), ('quest_end', 'Quest End')], max_length=20)),
                ('appear_conditions', models.ManyToManyField(blank=True, related_name='dialogues_to_appear', to='content.condition')),
                ('no_appear_conditions', models.ManyToManyField(blank=True, related_name='dialogues_to_no_appear', to='content.condition')),
                ('trigger_conditions', models.ManyToManyField(blank=True, related_name='dialogues_to_trigger', to='content.condition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DialogItemsToRemove',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('dialogue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.dialogue')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.item')),
            ],
        ),
        migrations.CreateModel(
            name='DialogItemsToGive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('dialogue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.dialogue')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.item')),
            ],
        ),
        migrations.CreateModel(
            name='DialogItemsRequired',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('dialogue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.dialogue')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.item')),
            ],
        ),
        migrations.CreateModel(
            name='Basic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dialogue', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='basic_dialogue', to='content.dialogue')),
                ('sequence', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='basic_dialogue_sequence', to='content.dialoguesequence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefab', models.TextField(blank=True, default='', null=True)),
                ('flat_physical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('flat_magical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('physical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('magical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_health_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_mana_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_regen_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stamina_cost', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('equipment_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='equipment_type', to='content.equipmenttype')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_item', to='content.item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dialogue',
            name='give_items',
            field=models.ManyToManyField(blank=True, related_name='given_by_dialogues', through='content.DialogItemsToGive', to='content.item'),
        ),
        migrations.AddField(
            model_name='dialogue',
            name='remove_items',
            field=models.ManyToManyField(blank=True, related_name='removed_by_dialogues', through='content.DialogItemsToRemove', to='content.item'),
        ),
        migrations.AddField(
            model_name='dialogue',
            name='required_items',
            field=models.ManyToManyField(blank=True, related_name='required_by_dialogues', through='content.DialogItemsRequired', to='content.item'),
        ),
        migrations.CreateModel(
            name='Consumable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_single_effect', models.BooleanField(default=True)),
                ('cooldown', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('effect_Duration', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('physical_Resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('magical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('heal_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mana_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stamina_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_regen_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('give_flat_health', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('give_flat_mana', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('give_flat_stamina', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='consumable_item', to='content.item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.item')),
            ],
        ),
        migrations.CreateModel(
            name='LoadingScreenMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('message', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='loading_screen_message', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='description',
            field=content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='item_description', to='content.localization'),
        ),
        migrations.AddField(
            model_name='item',
            name='name',
            field=content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='item_name', to='content.localization'),
        ),
        migrations.AddField(
            model_name='equipmenttype',
            name='name',
            field=content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='equipment_type_name', to='content.localization'),
        ),
        migrations.CreateModel(
            name='DialogueSequenceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('speaker', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('sequence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='content.dialoguesequence')),
                ('text', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='dialogue_sequence_item_text', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dialoguesequence',
            name='text',
            field=content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='dialogue_sequence_text', to='content.localization'),
        ),
        migrations.AddField(
            model_name='dialogue',
            name='button_text',
            field=content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='dialogue_button_text_name', to='content.localization'),
        ),
        migrations.CreateModel(
            name='DamageType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='damage_type_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbilityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='ability_type_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbilityTree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('icon_path', models.TextField(blank=True, default='', null=True)),
                ('description', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='ability_tree_description', to='content.localization')),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='ability_tree_name', to='content.localization')),
                ('slogan', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='ability_tree_slogan', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='npc_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dialogue',
            name='npc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialogues', to='content.npc'),
        ),
        migrations.CreateModel(
            name='POI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('icon_path', models.TextField(blank=True, default='', null=True)),
                ('show_at_start', models.BooleanField(default=False)),
                ('show_notification', models.BooleanField(default=True)),
                ('min_bounds_x', models.FloatField(default=0.0)),
                ('min_bounds_y', models.FloatField(default=0.0)),
                ('max_bounds_x', models.FloatField(default=0.0)),
                ('max_bounds_y', models.FloatField(default=0.0)),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='poi_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('is_self_ability', models.BooleanField(default=True)),
                ('apply_damage', models.BooleanField(default=True)),
                ('apply_knockback', models.BooleanField(default=False)),
                ('is_inverse_knockback', models.BooleanField(default=False)),
                ('knockback_force', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('knockback_duration', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('apply_stun', models.BooleanField(default=False)),
                ('stun_chance', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stun_duration', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(3)])),
                ('is_chargeable', models.BooleanField(default=False)),
                ('charge_time', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('locked_icon_path', models.TextField(blank=True, default='', null=True)),
                ('unlocked_icon_path', models.TextField(blank=True, default='', null=True)),
                ('ability_state_duration', models.FloatField(default=0.1, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(2)])),
                ('ability_animation_index', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('physical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('magical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('buff_health_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('buff_mana_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('buff_stamina_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('buff_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('buff_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('buff_stamina_regen_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('nerf_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('nerf_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('extra_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('extra_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('give_flat_health', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('give_flat_mana', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('give_flat_stamina', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('health_cost', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('mana_cost', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('stamina_cost', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('ability_tree', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='abilities', to='content.abilitytree')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ability_type', to='content.abilitytype')),
                ('damage_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ability_damage_type', to='content.damagetype')),
                ('description', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='ability_description', to='content.localization')),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='ability_name', to='content.localization')),
                ('projectile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='abilities', to='content.projectile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='projectile',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='projectile_type', to='content.projectiletype'),
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('money_reward', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('ability_points_reward', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)])),
                ('brief', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='quest_brief', to='content.localization')),
                ('items_reward', models.ManyToManyField(blank=True, related_name='quests_rewarded', through='content.ItemReward', to='content.item')),
                ('npc_giver', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='quests', to='content.npc')),
                ('title', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='quest_title', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='itemreward',
            name='quest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.quest'),
        ),
        migrations.CreateModel(
            name='QuestEnd',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dialogue', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_end_dialogue', to='content.dialogue')),
                ('sequence', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_end_dialogue_sequence', to='content.dialoguesequence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_item', to='content.item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('index', models.PositiveIntegerField(default=1, help_text='Orden del objetivo', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('is_trackeable', models.BooleanField(default=True)),
                ('brief', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='quest_objective_brief', to='content.localization')),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='content.quest')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestPrompt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acccept_text', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_prompt_dialogue_accept_text', to='content.dialoguesequenceitem')),
                ('deny_text', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_prompt_dialogue_deny_text', to='content.dialoguesequenceitem')),
                ('dialogue', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_prompt_dialogue', to='content.dialogue')),
                ('text', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_prompt_dialogue_text', to='content.dialoguesequenceitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('color_start', models.CharField(default='#FFFFFF', help_text='Color incial de gradiente.', max_length=7)),
                ('color_end', models.CharField(default='#FFFFFF', help_text='Color final de gradiente.', max_length=7)),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='rarity_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='rarity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='item_rarity', to='content.rarity'),
        ),
        migrations.CreateModel(
            name='WeaponType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('name', content.models.LocalizedField(help_text='Texto Localizado.', on_delete=django.db.models.deletion.CASCADE, related_name='weapon_type_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefab', models.TextField(blank=True, default='', null=True)),
                ('poise_break_force', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('flat_physical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('flat_magical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('physical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('magical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_health_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_mana_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_regen_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('attack_stamina_cost', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('attack_sequence', models.ManyToManyField(blank=True, null=True, related_name='weapons', to='content.attacksequence')),
                ('damage_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='damage_type', to='content.damagetype')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='weapon_item', to='content.item')),
                ('weapon_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='weapon_type', to='content.weapontype')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
