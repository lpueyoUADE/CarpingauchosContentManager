# Generated by Django 5.2.4 on 2025-08-12 04:47

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('value', models.PositiveIntegerField(default=0)),
                ('icon_path', models.TextField(blank=True, default='', null=True)),
                ('type', models.CharField(choices=[('weapon', 'Weapon'), ('equipment', 'Equipment'), ('consumable', 'Consumable'), ('quest', 'Quest Item')], max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Localization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('english', models.TextField(blank=True, default='', null=True)),
                ('spanish', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefab', models.TextField(blank=True, default='', null=True)),
                ('flat_physical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('flat_magical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('physical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('magical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_health_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_mana_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_regen_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stamina_cost', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('equipment_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='equipment_type', to='content.equipmenttype')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_item', to='content.item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Consumable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_single_effect', models.BooleanField(default=True)),
                ('cooldown', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('effect_Duration', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('physical_Resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('magical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('heal_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('mana_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stamina_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_regen_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('give_flat_health', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('give_flat_mana', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('give_flat_stamina', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='consumable_item', to='content.item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(default=1)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.item')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='description',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='item_description', to='content.localization'),
        ),
        migrations.AddField(
            model_name='item',
            name='name',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='item_name', to='content.localization'),
        ),
        migrations.AddField(
            model_name='equipmenttype',
            name='name',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_type_name', to='content.localization'),
        ),
        migrations.CreateModel(
            name='DamageType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='damage_type_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NPC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='npc_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('money_reward', models.PositiveIntegerField(default=0)),
                ('ability_points_reward', models.PositiveIntegerField(default=0)),
                ('brief', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_brief', to='content.localization')),
                ('items_reward', models.ManyToManyField(blank=True, related_name='quests_rewarded', through='content.ItemReward', to='content.item')),
                ('npc_giver', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='quests', to='content.npc')),
                ('title', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_title', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='itemreward',
            name='quest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.quest'),
        ),
        migrations.CreateModel(
            name='QuestItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_item', to='content.item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('index', models.PositiveIntegerField(default=1, help_text='Orden del objetivo')),
                ('is_trackeable', models.BooleanField(default=True)),
                ('brief', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quest_objective_brief', to='content.localization')),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='content.quest')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('color', models.CharField(default='#FFFFFF', help_text='Color en formato hexadecimal, ej. #FF0000', max_length=7)),
                ('name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rarity_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='rarity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='item_rarity', to='content.rarity'),
        ),
        migrations.CreateModel(
            name='WeaponType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Texto identificador del recurso.', max_length=150, unique=True)),
                ('key', models.SlugField(help_text='Texto autogenerado.', max_length=150, unique=True)),
                ('name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='weapon_type_name', to='content.localization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefab', models.TextField(blank=True, default='', null=True)),
                ('poise_break_force', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('flat_physical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('flat_magical_damage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('physical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('magical_resistance_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_health_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_mana_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('buff_stamina_regen_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('nerf_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_physical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('extra_magical_damage_percentage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('attack_stamina_cost', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('damage_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='damage_type', to='content.damagetype')),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='weapon_item', to='content.item')),
                ('weapon_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='weapon_type', to='content.weapontype')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
